#!/usr/bin/env python

import os, re, sys
sys.path.append(os.path.sep.join([os.path.dirname(os.path.realpath(__file__)), "SciEDPipeR"]))
sys.path.append(os.path.sep.join([os.path.dirname(os.path.realpath(__file__)), "SciEDPipeR", "sciedpiper"]))
import sciedpiper.Command as Command
import sciedpiper.PipelineRunner as PipelineRunner
import subprocess

UTILDIR = os.path.abspath(os.sep.join([os.path.dirname(__file__), "util"]))

MAX_PCT_ALIGNED_OK = 80        

# 2017-10-23
# Cicada Dennis added code which looks for the location of the Trinity program using the Unix "which" utility.
# Previous code which is replaced:
#if 'TRINITY_HOME' not in os.environ:
#    raise RuntimeError("must set TRINITY_HOME env var")
#TRINITY_HOME = os.environ['TRINITY_HOME']
TRINITY_HOME = ""
TRINITY_HOME_error_msg = "Before running {0}, you must set the environment variable TRINITY_HOME\n".format(sys.argv[0]) + \
    "\tto the base installation directory of Trinity,\n\tor that directory needs to be in the PATH.\n"
if 'TRINITY_HOME' in os.environ:
    TRINITY_HOME = os.environ['TRINITY_HOME']
else:
    # if hasattr(os, 'symlink'): # symlink was implemented to always return false when it was not implemented in early python.
    # Not using symlink. Using os.path.islink() and os.readlink().
    try:
        # I tried using "command -v Trinity" but for some reason, I was getting an OS permission error with that.
        # distutils.spawn.find_executable() also might work, I but already implemented the below.
        pipe1 = subprocess.Popen(["which", "Trinity"], stdout=subprocess.PIPE)
    except:
        sys.stderr.write(TRINITY_HOME_error_msg)
        # t, v, tb = sys.exc_info()
        # raise t, v, tb
        # For some reason the above was giving a syntax error. 
        # A simple raise should reraise the existing exception.
        raise
    else:
        TrinityPath, err_info = pipe1.communicate()
        # FIX - probably should be checking err_info for errors...
        #print "err_info is:"
        #print err_info

        # Determine TRINITY_HOME from the TrinityPath returned.
        # If TrinityPath is a link, we need to dereference the link.
        TrinityPath = TrinityPath.rstrip() # Need to strip off a newline.
        if len(TrinityPath) > 0:
            # print "Trinity that was found is: {:s}".format(repr(TrinityPath))
            # print os.path.islink(TrinityPath)
            TrinityPath = os.path.abspath(TrinityPath)
            # msg = "The Absolute Trinity path that was found is: {:s}".format(TrinityPath)
            # print msg
            # print os.path.islink(TrinityPath)
            while os.path.islink(TrinityPath):
                # print "That path is a link."
                TrinityPath = os.path.join(os.path.dirname(TrinityPath),os.readlink(TrinityPath))
                # print "The new path is: {:s}".format(TrinityPath)
            # Take off the last part of the path (which is the Trinity command)
            TRINITY_HOME = "/".join(TrinityPath.split("/")[0:-1])
            os.environ['TRINITY_HOME'] = TRINITY_HOME
            sys.stdout.write("TRINITY_HOME has been set to: {:s}.\n".format(TRINITY_HOME))
        # else: # There was no value returned by the which command. So Trinity is not in the PATH.
        #     Doing nothing leaves TRINITY_HOME as an empty string.
# end of else no TRINITY_HOME environment variable.

# If TRINITY_HOME didn't get set, it will still be an empty string.
if TRINITY_HOME == "":
    sys.stderr.write(TRINITY_HOME_error_msg)
    raise RuntimeError("must set TRINITY_HOME env var")

class DISCASM( PipelineRunner.PipelineRunner ):
    
    def func_update_arguments(self, arg_raw ):
        """
        Updates to the arg parser, command line options
        
        * arg_raw : Arguments ( not yet parsed )
                  : Arguments
        * return  : Updated Arguments
                  : Arguments
        """

        arg_raw.prog = "DISCASM"
        arg_raw.description = "extracts genome-aligned discordant and unmapped reads, and de novo assembles them"

        arg_raw.add_argument("--chimeric_junctions", dest="chimeric_junctions", required=True, help="STAR Chimeric.out.junction file")
        arg_raw.add_argument("--aligned_bam", dest="aligned_bam_filename", required=False, help="aligned bam file from your favorite rna-seq alignment tool")
        arg_raw.add_argument("--left_fq", dest="left_fq_filename", required=True, help="left fastq file")
        arg_raw.add_argument("--right_fq", dest="right_fq_filename", required=True, help="right fastq file")
        arg_raw.add_argument("--out_dir", dest="str_out_dir", required=True, help="output directory")
        arg_raw.add_argument("--denovo_assembler", dest="denovo_assembler", required=True, help="de novo assembly method: Trinity|Oases|OasesMultiK")
        arg_raw.add_argument("--add_trinity_params", dest="add_trinity_params", required=False, help="any additional parameters to pass on to Trinity if Trinity is the chosen assembler.")
        arg_raw.add_argument("--normalize_reads", default=False, action='store_true', help='perform in silico normalization prior to de novo assembly')

        return(arg_raw)
    

    def func_make_commands( self, args_parsed, cur_pipeline ):
        """
        Allows:
        - the creation of commands in the child object.
        - the creation of directories.
        - checking that files exist.
        
        To know the variables available from command line look in the ParentScript in func_create_arguments.
        """

        args = args_parsed

        aligned_bam_filename = None
        if args_parsed.aligned_bam_filename:
            aligned_bam_filename = os.path.abspath(args_parsed.aligned_bam_filename)
        
        chimeric_junctions_filename = os.path.abspath(args.chimeric_junctions)
        left_fq_filename = os.path.abspath(args.left_fq_filename)
        right_fq_filename = os.path.abspath(args.right_fq_filename)

        denovo_assembler = args.denovo_assembler

        if not re.search("(trinity|oases)", denovo_assembler, re.I):
            raise Exception("Error, assembler: " + denovo_assembler + " is not recognized. Only 'Trinity' and 'Oases' are currently supported.")
        
        ensure_locate_progs(denovo_assembler)

        args_parsed.str_out_dir = os.path.abspath(args_parsed.str_out_dir)
        str_out_dir = args_parsed.str_out_dir

        if not os.path.isdir(str_out_dir):
            os.makedirs(str_out_dir)
        os.chdir(str_out_dir)
        
        
        check_files_list = [ chimeric_junctions_filename, left_fq_filename, right_fq_filename]
        if aligned_bam_filename:
            check_files_list.append(aligned_bam_filename)
        
        cur_pipeline.func_check_files_exist(check_files_list)
        
        
        ## Extract the discordant and unmapped reads into fastq files
        
        lcmd_commands = []

        if aligned_bam_filename:

            ## Using both the Chimeric reads and those reads that failed to map to the genome.

            cmdstr = str( os.sep.join([UTILDIR, "retrieve_SF_chimeric_and_unmapped_reads.py"]) +
                          " " + aligned_bam_filename +
                          " " + chimeric_junctions_filename + 
                          " " + left_fq_filename + " " + right_fq_filename )

            discordant_left_fq_filename = os.path.basename(left_fq_filename) + ".extracted.fq"
            discordant_right_fq_filename = os.path.basename(right_fq_filename) + ".extracted.fq"


            lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                                  lstr_cur_dependencies = [ aligned_bam_filename, left_fq_filename, right_fq_filename ],
                                                  lstr_cur_products = [discordant_left_fq_filename, discordant_right_fq_filename] ) )
            
        else:

            ## Just the chimeric reads as per STAR
            
            cmdstr = str( os.sep.join([UTILDIR, "retrieve_SF_chimeric_reads.py"]) +
                          " " + chimeric_junctions_filename +
                          " " + left_fq_filename + " " + right_fq_filename )
            
            discordant_left_fq_filename = os.path.basename(left_fq_filename) + ".extracted.fq"
            discordant_right_fq_filename = os.path.basename(right_fq_filename) + ".extracted.fq"


            lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                                  lstr_cur_dependencies = [ chimeric_junctions_filename, left_fq_filename, right_fq_filename ],
                                                  lstr_cur_products = [discordant_left_fq_filename, discordant_right_fq_filename] ) )


        if args_parsed.normalize_reads:
            cmdstr = str(os.path.sep.join([TRINITY_HOME, "util", "insilico_read_normalization.pl"]) +
                         " --left " + discordant_left_fq_filename +
                         " --right " + discordant_right_fq_filename +
                         " --seqType fq --JM 20G --max_cov 50 ")

            normalized_left_fq_filename = discordant_left_fq_filename + ".normalized_K25_C50_pctSD200.fq"
            normalized_right_fq_filename = discordant_right_fq_filename + ".normalized_K25_C50_pctSD200.fq"
            
            lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                                  lstr_cur_dependencies = [ discordant_left_fq_filename,
                                                                            discordant_right_fq_filename ],
                                                  lstr_cur_products = [ normalized_left_fq_filename,
                                                                        normalized_right_fq_filename ] ) )

            discordant_left_fq_filename = normalized_left_fq_filename
            discordant_right_fq_filename = normalized_right_fq_filename

        ## De novo assemble the extracted reads

        

        assembled_transcripts_filename = None

        if re.match("trinity", denovo_assembler, re.I):

            cmdstr = str("Trinity --seqType fq --max_memory 10G " +
                         " --left " + discordant_left_fq_filename +
                         " --right " + discordant_right_fq_filename +
                         " --CPU 4 --full_cleanup --output trinity_out_dir " +
                         " --min_contig_length 100")

            if (args_parsed.add_trinity_params):
                cmdstr += " " + args_parsed.add_trinity_params
            
            assembled_transcripts_filename = "trinity_out_dir.Trinity.fasta"

            lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                                  lstr_cur_dependencies = [discordant_left_fq_filename, discordant_right_fq_filename],
                                                  lstr_cur_products = [assembled_transcripts_filename ] ) )
            


        elif re.match("oasesmultik", denovo_assembler, re.I):
            # run Oases multi-K   (Jaffa-style)
            cmdstr = str(UTILDIR + "/run_OASES_multiK.pl --left_fq " + discordant_left_fq_filename +
                         " --right_fq " + discordant_right_fq_filename +
                         " -K 19,36,4 -M 27 -L 100 " +
                         " -O oasesMultiK_out_dir ")

            assembled_transcripts_filename = "oasesMultiK_out_dir/oases.transcripts.fa"

            lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                                  lstr_cur_dependencies = [discordant_left_fq_filename, discordant_right_fq_filename],
                                                  lstr_cur_products = [assembled_transcripts_filename] ) )

            
            

        else:
            # oases

            cmdstr = str(UTILDIR + "/run_OASES.pl " + discordant_left_fq_filename +
                         " "  + discordant_right_fq_filename + " oases_out_dir ")

            assembled_transcripts_filename = "oases_out_dir/oases.transcripts.fa"

            lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                                  lstr_cur_dependencies = [discordant_left_fq_filename, discordant_right_fq_filename],
                                                  lstr_cur_products = [assembled_transcripts_filename] ) )
        


        
        return lcmd_commands



def ensure_locate_progs(assembler_name):

    progs = []
    if (re.search("trinity", assembler_name, re.I)):
        progs.append('Trinity')
    elif (re.search("oases", assembler_name, re.I)):
        progs += ['oases', 'velvetg', 'velveth']

    missing_prog = False
    for prog in progs:
        try:
            path = subprocess.check_output("which " + prog, shell=True)
            print >>sys.stderr, "Found prog: " + prog + " at path: " + path
        except Exception as e:
            print >>sys.stderr, "Error, cannot locate required program: " + prog
            missing_prog = True

    if missing_prog:
        raise Exception("Error, missing at least one required program available via PATH setting")

    return
                        

                          
    
if __name__ == "__main__":

    # Needed to run, calls the script
    DISCASM().func_run_pipeline()

